import chokidar, { watch } from "chokidar";
import consola from "consola";
import { getConfig } from "../config/get-config";
import { restart } from "./restart";

/**
 * File to watch for changes in the required directories. Please do not edit this file.
 */
export const watcher = async () => {
	const config = await getConfig();

	const rootPath = process.cwd();

	const assetsDir = config.assetsDir;
	const routesDir = config.routesDir;
	const pagesDir = config.pagesDir;
	const markdownDir: string[] = [];
	const broselDir = "brosel";

	if (config.markdown) {
		for (const dir of Object.values(config.markdown)) {
			console.log(dir.path);
			const markdownPath = `${rootPath}/${dir.path}`;
			markdownDir.push(markdownPath);
		}
	}

	const watchPaths = [
		assetsDir,
		routesDir,
		broselDir,
		pagesDir,
		...markdownDir,
	];

	consola.info(watchPaths);

	// Helper to determine which directory the file belongs to
	const getDirType = (filePath: string) => {
		if (filePath.startsWith(assetsDir)) return "assets";
		if (filePath.startsWith(routesDir)) return "routes";
		if (filePath.startsWith(pagesDir)) return "pages";
		for (const dir of markdownDir) {
			if (filePath.startsWith(dir)) return "markdown";
		}
		if (filePath.startsWith(broselDir)) return "brosel";
		return "unknown";
	};

	const watcher = chokidar.watch(watchPaths, {
		persistent: true,
		ignoreInitial: true,
	});

	watcher
		.on("add", async (path) => {
			const dirType = getDirType(path);
			consola.info(`[${dirType}] File added: ${path}`);
			if (dirType === "brosel") {
				consola.info("Brosel directory detected, reloading...");
				await restart();
			}
		})
		.on("change", (path) => {
			const dirType = getDirType(path);
			consola.info(`[${dirType}] File changed: ${path}`);
			// Implement your logic here for file change
		})
		.on("unlink", (path) => {
			const dirType = getDirType(path);
			consola.info(`[${dirType}] File removed: ${path}`);
			// Implement your logic here for file removal
		});

	process.on("SIGINT", () => {
		// close watcher when Ctrl-C is pressed
		console.log("\n\n");
		consola.info("Closing watcher...");
		watcher.close();

		process.exit(0);
	});
};
