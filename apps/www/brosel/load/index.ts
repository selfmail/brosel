import chokidar from "chokidar";
/**
 * This file is used to load the server, client and assets into the bun serve() function.
 * Please do not edit this file, unless you know what you're doing.
 */

import { getConfig } from "../config/get-config";

export const loadAssets = async () => {
	const config = await getConfig();
	const assets = new Bun.Glob(`${process.cwd()}/${config.assetsDir}/**/*`);
	const files: { path: string; handler: () => Promise<Response> }[] = [];
	for await (const file of assets.scan()) {
		files.push({
			path: file.replace(`${process.cwd()}/${config.assetsDir}/`, ""),
			handler: async () => {
				return new Response(await Bun.file(file).text());
			},
		});
	}

	const assetsWatcher = chokidar.watch(config.assetsDir);
	assetsWatcher.on("all", async (path, stats) => {
		const relativePath = path.replace(
			`${process.cwd()}/${config.assetsDir}/`,
			"",
		);

		if (await Bun.file(path).exists()) {
			// Update or add file
			files.push({
				path: relativePath,
				handler: async () => {
					return new Response(await Bun.file(path).text());
				},
			});
		} else {
			// Remove file
			const index = files.findIndex((file) => file.path === relativePath);
			if (index !== -1) {
				files.splice(index, 1);
			}
		}
	});

	return Object.fromEntries(files.map((file) => [file.path, file.handler]));
};
